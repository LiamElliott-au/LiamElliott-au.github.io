<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Liam Elliott</title>
    <link>https://drafts.liamelliott.me/</link>
    <description>Recent content on Liam Elliott</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 15:10:00 +0000</lastBuildDate><atom:link href="https://drafts.liamelliott.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hardcoding. Have your cake and eat it</title>
      <link>https://drafts.liamelliott.me/coding/2020-06-01-hardcoding-have-your-cake/</link>
      <pubDate>Mon, 01 Jun 2020 15:10:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2020-06-01-hardcoding-have-your-cake/</guid>
      <description>&lt;p&gt;As a junior developer, one of the key principles that were drummed into me was that hardcoding values is a BAD thing (amongst many other principles). But then more often than not, the pressures of deadlines, project managers and product owners don&amp;rsquo;t afford us the luxury of building an engineered solution the first time around. So we revert to simply hardcoding just to keep everyone happy and deliver a feature. What no one ever mentions is that there are two ways to hardcode values: the RIGHT way and the WRONG way.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GetHashCode() the easy way</title>
      <link>https://drafts.liamelliott.me/coding/2019-03-06-gethashcode/</link>
      <pubDate>Wed, 06 Mar 2019 15:10:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2019-03-06-gethashcode/</guid>
      <description>Remembering the most appropriate way to calculate a hashcode was always difficult. But not anymore</description>
    </item>
    
    <item>
      <title>New years goals</title>
      <link>https://drafts.liamelliott.me/personal/2019-01-08-welcome-to-2019/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/personal/2019-01-08-welcome-to-2019/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve never been one to set myself new years resolutions, not for any particular reason, I just don&amp;rsquo;t. However, last year I set myself several goals and/or challenges.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read 12 books in 12 months&lt;/li&gt;
&lt;li&gt;12 blog posts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So how did I go?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SignalR - Why? Because its easy</title>
      <link>https://drafts.liamelliott.me/coding/2018-08-21-signalr/</link>
      <pubDate>Tue, 21 Aug 2018 22:50:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-08-21-signalr/</guid>
      <description>&lt;p&gt;SignalR has been around for a few years now (since 2013), offering real-time notifications to our .Net applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RxJS refactor: BehaviourSubjects</title>
      <link>https://drafts.liamelliott.me/coding/2018-06-03-rxjs-refactor-behavioursubjects/</link>
      <pubDate>Sun, 03 Jun 2018 23:17:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-06-03-rxjs-refactor-behavioursubjects/</guid>
      <description>&lt;p&gt;In an earlier &lt;a href=&#34;https://drafts.liamelliott.me/coding/2018-03-26-rxjs-combinelatest-startwith/&#34;&gt;post&lt;/a&gt; I described how to leverage the power of RxJS and the combineLatest() and startWith() operators to tidy up my code. I have since updated the code on that page to reflect the new RxJS6 pipe operators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular6 Runtime environment Variables</title>
      <link>https://drafts.liamelliott.me/coding/2018-05-31-angular6-runtime-environment-variables/</link>
      <pubDate>Thu, 31 May 2018 22:44:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-05-31-angular6-runtime-environment-variables/</guid>
      <description>&lt;p&gt;Out of the box, Angular provides a convenient method for setting environment variables for each our local dev environment and our production environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ng directive Thought Experiment</title>
      <link>https://drafts.liamelliott.me/coding/2018-05-04-ng-directive-thought-experiment/</link>
      <pubDate>Fri, 04 May 2018 03:12:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-05-04-ng-directive-thought-experiment/</guid>
      <description>&lt;p&gt;Not long after publishing my recent post on minimising Async bindings in Angular by using the *ngIf=&amp;ldquo;obs$ | async as obs&amp;rdquo;; construct, I received the following comment on twitter:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Angular: arrrgh... too many async bindings</title>
      <link>https://drafts.liamelliott.me/coding/2018-05-01-angular-too-many-async-bindings/</link>
      <pubDate>Tue, 01 May 2018 00:52:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-05-01-angular-too-many-async-bindings/</guid>
      <description>In my previous post I came across a quirk with Angular, Observables and the Async pipe. That is, each subscription to an observable will initiate the observables execution. Hence we were calling the api once per async subscription.
 A subscribe call is simply a way to start an &amp;ldquo;Observable execution&amp;rdquo; and deliver values or events to an Observer of that execution. http://reactivex.io
 Original version &amp;lt;p&amp;gt;{{ (result$ | async).name }}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;{{ (result$ | async).</description>
    </item>
    
    <item>
      <title>RxJS: Using CombineLatest() &#43; StartWith() to remove code duplication</title>
      <link>https://drafts.liamelliott.me/coding/2018-03-26-rxjs-combinelatest-startwith/</link>
      <pubDate>Mon, 26 Mar 2018 19:45:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/coding/2018-03-26-rxjs-combinelatest-startwith/</guid>
      <description>05 June 2018 Update: Follow up post with further refactoring.
01 June 2018 Update: Updated code to RxJS6.
Scenario: In my Angular5 application I have a search results page that contains three components:
 Text-based filters component Paged results list Pagination component  After wiring up my code I ended up with something similar to below. This all worked fine, but as you can see it&amp;rsquo;s quite repetitive and not to mention hard to maintain.</description>
    </item>
    
    <item>
      <title>Extreme Ownership</title>
      <link>https://drafts.liamelliott.me/reading/2018-03-22-extreme-ownership/</link>
      <pubDate>Thu, 22 Mar 2018 20:50:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/reading/2018-03-22-extreme-ownership/</guid>
      <description>How U.S. Navy Seals Lead and Win Jocko Willink &amp;amp; Leif Babon  I first came across Jocko Willink on The Tim Ferriss show (ep 107: The Scariest Navy SEAL Imaginableâ€¦And What He Taught Me), from there I started to binge on Jocko&amp;rsquo;s podcast. Although this isn&amp;rsquo;t a review of the podcast, it is one that I have found very valuable, yet very difficult to recommend to anyone due to it&amp;rsquo;s often graphic content.</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://drafts.liamelliott.me/personal/2018-02-22-welcome/</link>
      <pubDate>Thu, 22 Feb 2018 01:03:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/personal/2018-02-22-welcome/</guid>
      <description>It&amp;rsquo;s time to stop procrastinating&amp;hellip; For many years now I&amp;rsquo;ve spoken on many occasions with colleagues about the importance of keeping a blog, even tonight I interviewed Thiago Passos for SSW TV on his last year or so (still waiting for it to be published), and how he has been working on building his profile, both as a blogger and as a speaker. In closing the interview, I promised Thiago I&amp;rsquo;d write my first post, and now I&amp;rsquo;m out of excuses.</description>
    </item>
    
    <item>
      <title>Lessons from a successful project</title>
      <link>https://drafts.liamelliott.me/personal/2019-03-08-lessonsfromsuccessfulproject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://drafts.liamelliott.me/personal/2019-03-08-lessonsfromsuccessfulproject/</guid>
      <description>&lt;p&gt;A colleague and I recently finished a short 3-week project with a client, the result of which is one very happy client, and an MVP finished before the deadline. Below are the lessons that I learnt during that project.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
